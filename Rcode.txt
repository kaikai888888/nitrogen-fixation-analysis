# analysis.R - Soil Free-Living Nitrogen Fixation Analysis
# Author: Hongkai Liao
# Date: 2025/5/21
# Description: Data visualization, regression, and HMSC model for nitrogen fixation study.

# ------------------------
# Load required packages
# ------------------------
packages <- c("ggplot2", "maps", "dplyr", "readxl", "nlme", "Hmsc", "tibble", "tidyr", "randomForest")
lapply(packages, require, character.only = TRUE)

# ------------------------
# 1. Global Map
# ------------------------
world_map <- map_data("world")
map <- read.csv("data/map.csv")

FC.shape <- c("Cropland" = 24, "Grassland" = 21, "Wetland" = 22, "Forest" = 23)

map_plot <- ggplot() +
  geom_polygon(data = world_map, aes(x = long, y = lat, group = group),
               fill = "gray90", color = "white", size = 0.3) +
  coord_fixed(1.3) +
  geom_point(data = map,
             aes(x = Longitude, y = Latitude, shape = Type),
             size = 3, color = "darkgreen", alpha = 0.8) +
  scale_shape_manual(values = FC.shape, name = "Ecosystem Type") +
  theme_minimal(base_size = 12) +
  theme(panel.grid = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        legend.position = c(0.1, 0.25),
        legend.background = element_rect(fill = "white", color = "gray80"))

ggsave("map_clean.pdf", plot = map_plot, width = 12, height = 6, dpi = 300)

# ------------------------
# 2. Boxplot of Nitrogen Fixation
# ------------------------
source("scripts/geom_flat_violin.R")
bNTI.df <- read.csv("data/boxplot.csv")

My.color <- c("Cropland" = "#702963", "Grassland" = "#E31A1C",
              "Wetland" = "#296370", "Forest" = "#637029")

p <- ggplot(bNTI.df, aes(x = groupID, y = NF, shape = groupID, color = groupID)) +
  geom_flat_violin(aes(fill = groupID), position = position_nudge(x = .25)) +
  coord_flip() +
  geom_jitter(alpha = 0.8, width = 0.2) +
  geom_boxplot(width = .35, outlier.shape = NA, fill = "white", alpha = 0.25) +
  scale_shape_manual(values = FC.shape) +
  scale_color_manual(values = My.color) +
  scale_fill_manual(values = My.color) +
  theme_bw() +
  theme(legend.position = "none")

ggsave("box_new.pdf", plot = p, width = 9, height = 6)

# ------------------------
# 3. Linear Mixed Effect Model
# ------------------------
r.df <- read.csv("data/Sand.csv")
ctrl <- lmeControl(opt = 'optim')
model <- lme(NF ~ C, random = ~1 | SiteID, data = r.df, control = ctrl)

model_df <- summary(model)$tTable %>%
  as.data.frame() %>%
  tibble::rownames_to_column("factor")

reg <- model_df %>%
  mutate(p_slope = ifelse(factor == "C", `p-value`, 1),
         factor = ifelse(factor == "(Intercept)", "Intercept", factor)) %>%
  mutate(p_slope = min(p_slope)) %>%
  select(factor, Value, p_slope) %>%
  tidyr::spread(factor, Value) %>%
  mutate(sig = ifelse(p_slope < 0.05, "< 0.05", "â‰¥ 0.05"))

p <- ggplot(r.df, aes(x = C, y = NF)) +
  geom_point(aes(shape = groupID), size = 3) +
  geom_abline(data = reg, aes(intercept = Intercept, slope = C), size = 1.5, color = "black") +
  scale_shape_manual(values = FC.shape) +
  facet_grid(~Type) +
  theme_bw() +
  labs(x = "C", y = "NF", linetype = "p-value")

ggsave("Sand3.pdf", plot = p, width = 4.5, height = 3)

# ------------------------
# 4. Random Forest Importance
# ------------------------
otu <- read.csv("mydata.csv", header = TRUE, row.names = 1)
set.seed(123)
otu_forest <- randomForest(nifH ~ ., data = otu, importance = TRUE, ntree = 1000)
importance_df <- importance(otu_forest, scale = TRUE)
importance_df <- importance_df[order(importance_df[,"%IncMSE"], decreasing = TRUE), ]
print(importance_df)

# ------------------------
# 5. HMSC Model
# ------------------------
data <- read.csv("forest.csv")
Y <- as.matrix(data[,20])
studyDesign <- data.frame(plot = as.factor(data$plot))
ranlevels <- list(plot = HmscRandomLevel(units = unique(studyDesign$plot)))

X <- data[,c("MAT","MAP","pH","Moi","SOC","TN","TP","AP","NH","NO",
            "Sand","Silt","Clay","CP","NP","CN","CNP","nifH")]

XFormula <- ~ MAT + MAP + pH + Moi + SOC + TN + TP + AP + NH + NO +
             Sand + Silt + Clay + CP + NP + CN + CNP + nifH

simul <- Hmsc(Y = Y, XData = X, XFormula = XFormula,
              studyDesign = studyDesign, ranLevels = ranlevels, distr = "normal")

samples <- 205
thin <- 1
transient <- 0.5 * samples
adaptNf <- 0.4 * samples
nChains <- 4

mod_HMSC <- sampleMcmc(simul, samples = samples, thin = thin,
                       transient = transient, nChains = nChains,
                       adaptNf = rep(adaptNf, simul$nr),
                       nParallel = nChains)

VP <- computeVariancePartitioning(mod_HMSC)
plotVariancePartitioning(mod_HMSC, VP = VP, las = 2, horiz = FALSE)

group <- c(1,1,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,4)
groupnames <- c("Climate", "proper", "sto", "nifH")
VPabu <- computeVariancePartitioning(hM = mod_HMSC, group = group, groupnames = groupnames)
plotVariancePartitioning(mod_HMSC, VPabu)

postabu <- convertToCodaObject(mod_HMSC)
summary(effectiveSize(postabu$Beta))
betaabu <- getPostEstimate(mod_HMSC, "Beta")
predYabu <- computePredictedValues(mod_HMSC, expected = TRUE, thin = 1)
MFabu <- evaluateModelFit(hM = mod_HMSC, predY = predYabu)

print(MFabu)
print(VPabu)